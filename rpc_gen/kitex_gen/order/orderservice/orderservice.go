// Code generated by Kitex v0.12.1. DO NOT EDIT.

package orderservice

import (
	"context"
	"errors"
	order "github.com/MakiJOJO/douyin-mall-echo/rpc_gen/kitex_gen/order"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateOrder": kitex.NewMethodInfo(
		createOrderHandler,
		newCreateOrderArgs,
		newCreateOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"OrderPaySuccess": kitex.NewMethodInfo(
		orderPaySuccessHandler,
		newOrderPaySuccessArgs,
		newOrderPaySuccessResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	orderServiceServiceInfo                = NewServiceInfo()
	orderServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func createOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.CreateOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).CreateOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateOrderArgs:
		success, err := handler.(order.OrderService).CreateOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateOrderArgs() interface{} {
	return &CreateOrderArgs{}
}

func newCreateOrderResult() interface{} {
	return &CreateOrderResult{}
}

type CreateOrderArgs struct {
	Req *order.CreateOrderRequest
}

func (p *CreateOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.CreateOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.CreateOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateOrderArgs_Req_DEFAULT *order.CreateOrderRequest

func (p *CreateOrderArgs) GetReq() *order.CreateOrderRequest {
	if !p.IsSetReq() {
		return CreateOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateOrderResult struct {
	Success *order.CreateOrderResponse
}

var CreateOrderResult_Success_DEFAULT *order.CreateOrderResponse

func (p *CreateOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.CreateOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateOrderResult) Unmarshal(in []byte) error {
	msg := new(order.CreateOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateOrderResult) GetSuccess() *order.CreateOrderResponse {
	if !p.IsSetSuccess() {
		return CreateOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.CreateOrderResponse)
}

func (p *CreateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateOrderResult) GetResult() interface{} {
	return p.Success
}

func orderPaySuccessHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.OrderPaySuccessRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).OrderPaySuccess(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *OrderPaySuccessArgs:
		success, err := handler.(order.OrderService).OrderPaySuccess(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*OrderPaySuccessResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newOrderPaySuccessArgs() interface{} {
	return &OrderPaySuccessArgs{}
}

func newOrderPaySuccessResult() interface{} {
	return &OrderPaySuccessResult{}
}

type OrderPaySuccessArgs struct {
	Req *order.OrderPaySuccessRequest
}

func (p *OrderPaySuccessArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.OrderPaySuccessRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *OrderPaySuccessArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *OrderPaySuccessArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *OrderPaySuccessArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *OrderPaySuccessArgs) Unmarshal(in []byte) error {
	msg := new(order.OrderPaySuccessRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var OrderPaySuccessArgs_Req_DEFAULT *order.OrderPaySuccessRequest

func (p *OrderPaySuccessArgs) GetReq() *order.OrderPaySuccessRequest {
	if !p.IsSetReq() {
		return OrderPaySuccessArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *OrderPaySuccessArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderPaySuccessArgs) GetFirstArgument() interface{} {
	return p.Req
}

type OrderPaySuccessResult struct {
	Success *order.OrderPaySuccessResponse
}

var OrderPaySuccessResult_Success_DEFAULT *order.OrderPaySuccessResponse

func (p *OrderPaySuccessResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.OrderPaySuccessResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *OrderPaySuccessResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *OrderPaySuccessResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *OrderPaySuccessResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *OrderPaySuccessResult) Unmarshal(in []byte) error {
	msg := new(order.OrderPaySuccessResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *OrderPaySuccessResult) GetSuccess() *order.OrderPaySuccessResponse {
	if !p.IsSetSuccess() {
		return OrderPaySuccessResult_Success_DEFAULT
	}
	return p.Success
}

func (p *OrderPaySuccessResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.OrderPaySuccessResponse)
}

func (p *OrderPaySuccessResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderPaySuccessResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateOrder(ctx context.Context, Req *order.CreateOrderRequest) (r *order.CreateOrderResponse, err error) {
	var _args CreateOrderArgs
	_args.Req = Req
	var _result CreateOrderResult
	if err = p.c.Call(ctx, "CreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OrderPaySuccess(ctx context.Context, Req *order.OrderPaySuccessRequest) (r *order.OrderPaySuccessResponse, err error) {
	var _args OrderPaySuccessArgs
	_args.Req = Req
	var _result OrderPaySuccessResult
	if err = p.c.Call(ctx, "OrderPaySuccess", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
