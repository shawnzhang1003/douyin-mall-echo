// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package pay

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *PayRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PayRequest[number], err)
}

func (x *PayRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PayRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TotoalPrice, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *PayResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PayResponse[number], err)
}

func (x *PayResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PayUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PayRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PayRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *PayRequest) fastWriteField2(buf []byte) (offset int) {
	if x.TotoalPrice == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.GetTotoalPrice())
	return offset
}

func (x *PayResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PayResponse) fastWriteField1(buf []byte) (offset int) {
	if x.PayUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPayUrl())
	return offset
}

func (x *PayRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PayRequest) sizeField1() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOrderId())
	return n
}

func (x *PayRequest) sizeField2() (n int) {
	if x.TotoalPrice == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.GetTotoalPrice())
	return n
}

func (x *PayResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PayResponse) sizeField1() (n int) {
	if x.PayUrl == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPayUrl())
	return n
}

var fieldIDToName_PayRequest = map[int32]string{
	1: "OrderId",
	2: "TotoalPrice",
}

var fieldIDToName_PayResponse = map[int32]string{
	1: "PayUrl",
}
